def gcd(a,b):
  while b > 0:
    a,b = b,a % b
  return a

def inv(b,m):
  s = 0
  t = 1
  a = m
  while b != 1:
    q = a//b
    aa = b
    b = a % b
    a = aa
    ss = t
    t = s - q*t
    s = ss
  if t < 0:
    t = t + m
  return t

def nextPrime(p):
 while p % 6 != 5:
   p = p + 1
 m = 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29
 
 while True:
   while gcd(p,m) != 1:
      p = p + 6 
   if (pow(17,p-1,p) != 1):
      p = p + 6
      continue
   return p
 return "ERROR"

a = 1234* 2**600
b = 789 * 2**700
P = nextPrime(a) 
Q = nextPrime(b) 
print(P - a)
print(Q - b)

PHI = (P-1)*(Q-1)
e = 3
d = inv(e, PHI)
N = P * Q
#print(N)
assert ( pow(1234, e*d, N) == 1234 )
