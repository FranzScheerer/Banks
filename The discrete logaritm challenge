def nextSP(p):
 if p % 6 != 5:
   p = p + 1
 return nextSP_(p)
 
def gcd(a,b):
  while b > 0:
    a,b = b,a % b
  return a
 

def nextSP_(p):
  m_ = 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29
  q = (p - 1)//2
  while True:
    while gcd(p,m_) != 1 or gcd(q,m_) != 1:
      p = p + 6
      q = q + 3
    if (pow(7,p-1,p) != 1 or pow(7,q-1,q) != 1):
      p = p + 6
      q = q + 3
      continue
    return p
  return "ERROR"

#P = nextSP(2**1200)
P = 115867 + 2**1200
print(P - 2**1200)
Q = (P - 1) // 2

e = 34343473947389
d = pow(e, Q-2, Q)
print( pow(457854, e*d, P) ) 

import random


print ("Some challenges - find the discrete logarithm ")
max = 2**120
print (pow(1234567, random.randint(1,max), P))
print (pow(1234567, random.randint(1,max), P))
print (pow(1234567, random.randint(1,max), P))
print (pow(1234567, random.randint(1,max), P))
print (pow(1234567, random.randint(1,max), P))
print (pow(1234567, random.randint(1,max), P))
"""
2050342389450141097473580885299039966330092758187949963817620461347302208765817449899684708939077469611454767583995401732788645705246004217462208130392820778777276609477656164696452580804193305020692268842942085977479252668773137407531084170196554462315024604742617367557632224910920205050062229136823276536652213129108530645465189828420708855912926579054630976
3267563742134542014635995283783149963715743070601848174328595231533459702168657006440513397600476434030345573109982412140967795664404489502559956714017786928391400960107071724190996428827341654650513746132444963518074340427084831176457314914131894406123327631439543898463774404304692250234076992721919691599788278599333740157344980681029474524001332234346905867
16318263543722513823291264351485470689501833790848109737648727826666393166533143699285031063337425797434481831218513943219084997175744015601206897338305854490645405646726482816551254941602228727847230705848034962140091751874956562422192810637353984622950131994614700318255742331388127546785855335265216286354663998622337385813719631015955749285810618899800057253
4895052605666429519170436678126213622172245579659503530147938418011306250768177331142818825798308351854727317705800095074768106674995187028195336288096735394933115261700633002476343900390970290891484122267269507329730051522641655528118782125729837956407758028221873881040965602573652397700616903694665883580786805552229660520643271076331405145370241104724776819
8222772494240597037173716845799993451426279304001554958148671480650575922814831475501026893446166951136959770473027151717214220112669515954921950387410596419746980728730433501266964056966056670309186466035162709095930179678835168722443564409889847776190542097459704265850039342866038253652617493784908076757937218455733561837115618459130848477639070549371160488
2408624675948869245874299465093443694959309249254896467402509058891414363902656367174200457157260868639980091534215646378439116664416742057676784181497811875840527712240445729994827849893259435172749673681722226708966582131134458401827694291237450316174197404313123421960283239719074321118033596085420666430415203479847715215296182542950766516977974585081673728
"""
