
#include <stddef.h>
#include <string.h>

typedef struct State_ {
    unsigned char s[256];
    unsigned char a;
    unsigned char i;
    unsigned char j;
    unsigned char k;
    unsigned char w;
    unsigned char z;
} State;

#define LOW(B)  ((B) & 0xf)
#define HIGH(B) ((B) >> 4)

static void
memzero(void *pnt, size_t len)
{
  ;
}

static void
initialize_state(State *state)
{
    unsigned int v;

    for (v = 0; v < 256; v++) {
        state->s[v] = (unsigned char) v;
    }
    state->a = 0;
    state->i = 0;
    state->j = 0;
    state->k = 0;
    state->w = 1;
    state->z = 0;
}

static void
update(State *state)
{
    unsigned char t;
    unsigned char y;

    state->i += state->w;
    y = state->j + state->s[state->i];
    state->j = state->k + state->s[y];
    state->k = state->i + state->k + state->s[state->j];
    t = state->s[state->i];
    state->s[state->i] = state->s[state->j];
    state->s[state->j] = t;
}

static unsigned char
output(State *state)
{
    const unsigned char y1 = state->z + state->k;
    const unsigned char x1 = state->i + state->s[y1];
    const unsigned char y2 = state->j + state->s[x1];

    state->z = state->s[y2];

    return state->z;
}


static void
whip(State *state)
{
    const unsigned int r = 512;
    unsigned int       v;

    for (v = 0; v < r; v++) {
        update(state);
    }
    state->w += 2;
}

static void
shuffle(State *state)
{
    whip(state);
    state->a = 0;
}


static void
absorb_nibble(State *state, const unsigned char x)
{
    unsigned char t;
    unsigned char y;

    if (state->a == 128) {
        shuffle(state);
    }
    y = 128 + x;
    t = state->s[state->a];
    state->s[state->a] = state->s[y];
    state->s[y] = t;
    state->a++;
}

static void
absorb_byte(State *state, const unsigned char b)
{
    state->j += b;
    absorb_nibble(state, LOW(b));
    absorb_nibble(state, HIGH(b));
}

static unsigned char
drip(State *state)
{
    if (state->a > 0) {
        shuffle(state);
    }
    update(state);

    return output(state);
}

static void
squeeze(State *state, unsigned char *out, size_t outlen)
{
    size_t v;

    if (state->a > 0) {
        shuffle(state);
    }
    for (v = 0; v < outlen; v++) {
        out[v] = drip(state);
    }
}




#include <stdio.h>
int main(){
  int i,c,cc;
  char out[32];  
  char pw[] = "total geheim";

  State state, sb;
  initialize_state(&state);
  initialize_state(&sb);

  i = 0;
  while (pw[i++]){
     absorb_byte(&state, pw[i]);
  }
  i = 1;
  while (pw[i++]){
     absorb_byte(&sb, pw[i]);
  }

  while ((c = fgetc(stdin)) != -1){
     cc = c ^ output(&state) ^ output(&sb);
     absorb_byte(&state, cc);
     absorb_byte(&sb, cc);
     fprintf(stdout,"%c", cc);
  }
 
  squeeze(&state, out, 32);

  for (i=0;i<32;i++)
     fprintf(stderr, "%02X", (unsigned char)out[i]);
  fprintf(stderr, "\n");

  return 0;
}
